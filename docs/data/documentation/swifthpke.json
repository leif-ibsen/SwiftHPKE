{"kind":"symbol","primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"SwiftHPKE implements the Hybrid Public Key Encryption standard as defined in [RFC 9180].","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The basic concepts in SwiftHPKE are ","type":"text"},{"type":"codeVoice","code":"CipherSuite"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Sender"},{"text":" and ","type":"text"},{"code":"Recipient","type":"codeVoice"},{"type":"text","text":", represented by the "},{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite","isActive":true,"type":"reference"},{"type":"text","text":" structure and the "},{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient","isActive":true,"type":"reference"},{"text":" classes.","type":"text"}]},{"inlineContent":[{"text":"A CipherSuite combines a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Key Encapsulation Mechanism"}]},{"text":" (","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM","isActive":true},{"text":"), a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Key Derivation Function"}]},{"type":"text","text":" ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and a ","type":"text"},{"inlineContent":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"type":"emphasis"},{"text":" (","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD"},{"type":"text","text":") algorithm."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are 5 different KEM’s, 3 different KDF’s and 4 different AEAD’s giving 60 CipherSuite combinations."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Encryption and decryption takes place in one of four modes:"}]},{"items":[{"content":[{"inlineContent":[{"text":"Base mode","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Preshared key mode","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticated mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Authenticated, preshared key mode","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","text":"Stateless Single-shot API","anchor":"Stateless-Single-shot-API","level":3},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"CipherSuite","type":"codeVoice"},{"type":"text","text":" instance can encrypt (seal) a single plaintext message and decrypt (open) a single"},{"type":"text","text":" "},{"type":"text","text":"ciphertext message without the need for a "},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" instance and a "},{"type":"codeVoice","code":"Recipient"},{"text":" instance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Example","type":"text"}],"type":"strong"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Encryption and decryption of a single message in base mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .X448, kdf: .KDF512, aead: .AESGCM256)","","\/\/ The recipient keys","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","let plainText = Bytes(\"Hi, there\".utf8)","let (encapsulatedKey, cipherText) = try theSuite.seal(publicKey: recipientPub, info: [1, 2, 3], pt: plainText, aad: [4, 5, 6])","let decrypted = try theSuite.open(privateKey: recipientPriv, info: [1, 2, 3], ct: cipherText, aad: [4, 5, 6], encap: encapsulatedKey)","print(String(bytes: decrypted, encoding: .utf8)!)"]},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"code":["Hi, there"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"Stateful-Multi-message-API","text":"Stateful Multi-message API","type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" is based on a specific "},{"type":"codeVoice","code":"CipherSuite"},{"text":" and a ","type":"text"},{"code":"Sender","type":"codeVoice"},{"text":" instance can encrypt (seal)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a sequence of plaintexts in one of the four modes shown above."}],"type":"paragraph"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Recipient"},{"text":" is also based on a specific ","type":"text"},{"type":"codeVoice","code":"CipherSuite"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"Recipient"},{"type":"text","text":" instance can decrypt (open)"},{"text":" ","type":"text"},{"type":"text","text":"a sequence of ciphertexts in the four modes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example","type":"text"}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Encryption and decryption of several messages in authenticated mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .P384, kdf: .KDF384, aead: .CHACHAPOLY)","","let plainText1 = Bytes(\"Hi, there 1\".utf8)","let plainText2 = Bytes(\"Hi, there 2\".utf8)","let plainText3 = Bytes(\"Hi, there 3\".utf8)","","\/\/ The Sender and Recipient keys","let (senderPub, senderPriv) = try theSuite.makeKeyPair()","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","\/\/ Create the Sender instance","let sender = try Sender(suite: theSuite, publicKey: recipientPub, info: [1, 2, 3], authentication: senderPriv)","","let cipherText1 = try sender.seal(pt: plainText1, aad: [4, 5])","let cipherText2 = try sender.seal(pt: plainText2, aad: [6, 7])","let cipherText3 = try sender.seal(pt: plainText3, aad: [8, 9])","","\/\/ Create the Recipient instance","let recipient = try Recipient(suite: theSuite, privateKey: recipientPriv, info: [1, 2, 3], authentication: senderPub, encap: sender.encapsulatedKey)","","let decrypted1 = try recipient.open(ct: cipherText1, aad: [4, 5])","let decrypted2 = try recipient.open(ct: cipherText2, aad: [6, 7])","let decrypted3 = try recipient.open(ct: cipherText3, aad: [8, 9])","","print(String(bytes: decrypted1, encoding: .utf8)!)","print(String(bytes: decrypted2, encoding: .utf8)!)","print(String(bytes: decrypted3, encoding: .utf8)!)"]},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"syntax":"swift","code":["Hi, there 1","Hi, there 2","Hi, there 3"],"type":"codeListing"},{"type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"text","text":" "},{"text":"The messages must be decrypted in the order in which they were encrypted.","type":"text"}]}],"style":"important"},{"type":"heading","text":"Usage","anchor":"Usage","level":3},{"type":"paragraph","inlineContent":[{"text":"To use SwiftHPKE, in your project ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Package.swift","type":"text"}]},{"type":"text","text":" file add a dependency like"}]},{"type":"codeListing","syntax":"swift","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/leif-ibsen\/SwiftHPKE\", from: \"2.5.0\"),","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftHPKE itself depends on the ASN1, BigInt and Digest packages"}]},{"type":"codeListing","syntax":"swift","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/leif-ibsen\/ASN1\", from: \"2.5.0\"),","  .package(url: \"https:\/\/github.com\/leif-ibsen\/BigInt\", from: \"1.17.0\"),","  .package(url: \"https:\/\/github.com\/leif-ibsen\/Digest\", from: \"1.6.0\"),","],"]},{"type":"aside","style":"important","name":"Important","content":[{"inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"text":"SwiftHPKE requires Swift 5.0. It also requires that the ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"UInt"},{"text":" types be 64 bit types.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftHPKE uses Apple’s CryptoKit framework. Therefore, for macOS the version must be at least 10.15,"},{"type":"text","text":" "},{"text":"for iOS the version must be at least 13, and for watchOS the version must be at least 8.","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"metadata":{"externalID":"SwiftHPKE","symbolKind":"module","modules":[{"name":"SwiftHPKE"}],"role":"collection","roleHeading":"Framework","title":"SwiftHPKE"},"hierarchy":{"paths":[[]]},"variants":[{"paths":["\/documentation\/swifthpke"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Hybrid Public Key Encryption","type":"text"}],"identifier":{"url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender"],"title":"Classes"},{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PrivateKey","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PublicKey","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Base64"],"title":"Structures"},{"title":"Type Aliases","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Byte","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Bytes"]},{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/HPKEException"],"title":"Enumerations"},{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"],"title":"Additional Information"}],"sections":[],"references":{"doc://SwiftHPKE/documentation/SwiftHPKE/Sender":{"url":"\/documentation\/swifthpke\/sender","type":"topic","abstract":[{"type":"text","text":"The sender"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Sender"}],"kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender","title":"Sender","navigatorTitle":[{"kind":"identifier","text":"Sender"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"url":"\/documentation\/swifthpke\/cryptokit","title":"CryptoKit Compatibility","kind":"article","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","abstract":[{"type":"text","text":"SwiftHPKE is compatible with Apple’s CryptoKit framework"}],"role":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE/CipherSuite":{"abstract":[{"text":"The cipher suite","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CipherSuite","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"CipherSuite"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite","title":"CipherSuite","type":"topic","kind":"symbol","url":"\/documentation\/swifthpke\/ciphersuite"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"title":"SwiftHPKE","url":"\/documentation\/swifthpke","abstract":[{"type":"text","text":"Hybrid Public Key Encryption"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","type":"topic","kind":"symbol","role":"collection"},"doc://SwiftHPKE/documentation/SwiftHPKE/Base64":{"type":"topic","navigatorTitle":[{"text":"Base64","kind":"identifier"}],"abstract":[{"text":"The Base64 structure","type":"text"}],"title":"Base64","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Base64","kind":"identifier"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Base64","url":"\/documentation\/swifthpke\/base64"},"doc://SwiftHPKE/documentation/SwiftHPKE/HPKEException":{"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HPKEException"}],"type":"topic","url":"\/documentation\/swifthpke\/hpkeexception","abstract":[{"text":"The HPKE exceptions","type":"text"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/HPKEException","role":"symbol","title":"HPKEException","navigatorTitle":[{"kind":"identifier","text":"HPKEException"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","url":"\/documentation\/swifthpke\/keymanagement","kind":"article","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic","role":"article","title":"Key Management"},"doc://SwiftHPKE/documentation/SwiftHPKE/Bytes":{"url":"\/documentation\/swifthpke\/bytes","type":"topic","abstract":[{"type":"text","text":"Array of unsigned 8 bit values"}],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Bytes","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Bytes","title":"Bytes","navigatorTitle":[{"kind":"identifier","text":"Bytes"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/SecretExport":{"url":"\/documentation\/swifthpke\/secretexport","title":"Secret Export","kind":"article","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","abstract":[{"type":"text","text":"Creating secret messages"}],"role":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"url":"\/documentation\/swifthpke\/references","title":"References","kind":"article","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"role":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE/Byte":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Byte"}],"title":"Byte","url":"\/documentation\/swifthpke\/byte","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Byte","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Unsigned 8 bit value"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Byte","kind":"identifier"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/PrivateKey":{"kind":"symbol","url":"\/documentation\/swifthpke\/privatekey","abstract":[{"text":"The private key","type":"text"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PrivateKey","title":"PrivateKey","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PrivateKey"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrivateKey","kind":"identifier"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/Recipient":{"url":"\/documentation\/swifthpke\/recipient","abstract":[{"type":"text","text":"The recipient"}],"role":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Recipient","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Recipient","kind":"identifier"}],"title":"Recipient"},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"title":"Performance","abstract":[{"type":"text","text":"Encryption and decryption speed"}],"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","role":"article","kind":"article","url":"\/documentation\/swifthpke\/performance"},"doc://SwiftHPKE/documentation/SwiftHPKE/KDF":{"url":"\/documentation\/swifthpke\/kdf","navigatorTitle":[{"text":"KDF","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"The key derivation functions"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KDF","kind":"identifier"}],"title":"KDF","type":"topic","kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF"},"doc://SwiftHPKE/documentation/SwiftHPKE/PublicKey":{"type":"topic","navigatorTitle":[{"text":"PublicKey","kind":"identifier"}],"abstract":[{"type":"text","text":"The public key"}],"title":"PublicKey","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PublicKey"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PublicKey","url":"\/documentation\/swifthpke\/publickey"},"doc://SwiftHPKE/documentation/SwiftHPKE/KEM":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM","url":"\/documentation\/swifthpke\/kem","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KEM"}],"navigatorTitle":[{"kind":"identifier","text":"KEM"}],"kind":"symbol","title":"KEM","abstract":[{"type":"text","text":"The key encapsulation mechanisms"}],"role":"symbol","type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/AEAD":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AEAD"}],"role":"symbol","title":"AEAD","kind":"symbol","url":"\/documentation\/swifthpke\/aead","abstract":[{"type":"text","text":"The AEAD encryption algorithms"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AEAD","kind":"identifier"}]}}}