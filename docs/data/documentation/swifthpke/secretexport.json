{"primaryContentSections":[{"content":[{"anchor":"","type":"heading","level":2,"text":""},{"type":"paragraph","inlineContent":[{"text":"Given the recipient’s public key, a sender can generate a secret that only the recipient can know.","type":"text"}]},{"anchor":"Example-1","type":"heading","level":3,"text":"Example 1"},{"code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","","\/\/ Generate the secret","","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [1, 2, 3], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"giving (for example):","type":"text"}]},{"code":["Generated secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]","Retrieved secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-2","type":"heading","level":3,"text":"Example 2"},{"code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: [])","","\/\/ Generate the secret","","let secret = try sender.sendExport(context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let receiver = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: [], encap: sender.encapsulatedKey)","let retrievedSecret = try receiver.receiveExport(context: [1, 2, 3], L: 10)","print(\"Retrieved secret:\", retrievedSecret)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"code":["Generated secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]","Retrieved secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The above examples use Base mode. Preshared key mode, Authenticated mode and Authenticated, preshared key mode","type":"text"},{"text":" ","type":"text"},{"text":"can also be used.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"]]},"abstract":[{"type":"text","text":"Creating secret messages"}],"seeAlsoSections":[{"generated":true,"anchor":"Additional-Information","title":"Additional Information","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"]}],"sections":[],"identifier":{"url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/swifthpke\/secretexport"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"SwiftHPKE"}],"role":"article","title":"Secret Export","roleHeading":"Article"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","references":{"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"url":"\/documentation\/swifthpke\/cryptokit","title":"CryptoKit Compatibility","kind":"article","type":"topic","abstract":[{"text":"SwiftHPKE is compatible with Apple’s CryptoKit framework","type":"text"}],"role":"article","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"abstract":[{"text":"Hybrid Public Key Encryption","type":"text"}],"kind":"symbol","role":"collection","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","type":"topic","title":"SwiftHPKE","url":"\/documentation\/swifthpke"},"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"title":"Key Management","url":"\/documentation\/swifthpke\/keymanagement","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","abstract":[{"text":"Creating new keys and loading exsisting keys","type":"text"}],"type":"topic","role":"article","kind":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"abstract":[{"type":"text","text":"Encryption and decryption speed"}],"kind":"article","url":"\/documentation\/swifthpke\/performance","title":"Performance","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","role":"article","type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References","title":"References","type":"topic","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"role":"article","url":"\/documentation\/swifthpke\/references","kind":"article"}}}