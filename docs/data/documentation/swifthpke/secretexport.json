{"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"],"title":"Additional Information","generated":true}],"kind":"article","variants":[{"paths":["\/documentation\/swifthpke\/secretexport"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"article","title":"Secret Export","modules":[{"name":"SwiftHPKE"}],"roleHeading":"Article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Creating secret messages"}],"primaryContentSections":[{"content":[{"text":"","level":2,"type":"heading","anchor":""},{"type":"paragraph","inlineContent":[{"text":"Given the recipient’s public key, a sender can generate a secret that only the recipient can know.","type":"text"}]},{"level":3,"type":"heading","text":"Example 1","anchor":"Example-1"},{"syntax":"swift","type":"codeListing","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","","\/\/ Generate the secret","","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [1, 2, 3], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"]},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Generated secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]","Retrieved secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]"],"type":"codeListing"},{"level":3,"type":"heading","text":"Example 2","anchor":"Example-2"},{"type":"codeListing","syntax":"swift","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: [])","","\/\/ Generate the secret","","let secret = try sender.sendExport(context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let receiver = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: [], encap: sender.encapsulatedKey)","let retrievedSecret = try receiver.receiveExport(context: [1, 2, 3], L: 10)","print(\"Retrieved secret:\", retrievedSecret)"]},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Generated secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]","Retrieved secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]"]},{"type":"paragraph","inlineContent":[{"text":"The above examples use Base mode. Preshared key mode, Authenticated mode and Authenticated, preshared key mode","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can also be used."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"]]},"references":{"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"kind":"article","abstract":[{"text":"Creating new keys and loading exsisting keys","type":"text"}],"role":"article","title":"Key Management","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","url":"\/documentation\/swifthpke\/keymanagement"},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"type":"topic","kind":"article","role":"article","url":"\/documentation\/swifthpke\/references","title":"References"},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"kind":"article","abstract":[{"text":"SwiftHPKE is compatible with Apple’s CryptoKit framework","type":"text"}],"role":"article","title":"CryptoKit Compatibility","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","url":"\/documentation\/swifthpke\/cryptokit"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"type":"topic","title":"SwiftHPKE","kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","url":"\/documentation\/swifthpke","abstract":[{"type":"text","text":"Hybrid Public Key Encryption"}],"role":"collection"},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"kind":"article","url":"\/documentation\/swifthpke\/performance","abstract":[{"text":"Encryption and decryption speed","type":"text"}],"role":"article","type":"topic","title":"Performance","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance"}}}