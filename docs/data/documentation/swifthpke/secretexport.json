{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport"},"metadata":{"role":"article","roleHeading":"Article","title":"Secret Export","modules":[{"name":"SwiftHPKE"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"paths":["\/documentation\/swifthpke\/secretexport"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","abstract":[{"text":"Creating secret messages","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"]]},"seeAlsoSections":[{"title":"Additional Information","generated":true,"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"","level":2,"anchor":""},{"inlineContent":[{"text":"Given the recipient’s public key, a sender can generate a secret that only the recipient can know.","type":"text"}],"type":"paragraph"},{"anchor":"Example-1","text":"Example 1","type":"heading","level":3},{"syntax":"swift","type":"codeListing","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","","\/\/ Generate the secret","","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [1, 2, 3], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"]},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"syntax":"swift","code":["Generated secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]","Retrieved secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]"],"type":"codeListing"},{"type":"heading","level":3,"text":"Example 2","anchor":"Example-2"},{"type":"codeListing","syntax":"swift","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: [])","","\/\/ Generate the secret","","let secret = try sender.sendExport(context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let receiver = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: [], encap: sender.encapsulatedKey)","let retrievedSecret = try receiver.receiveExport(context: [1, 2, 3], L: 10)","print(\"Retrieved secret:\", retrievedSecret)"]},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"type":"codeListing","code":["Generated secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]","Retrieved secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]"],"syntax":"swift"},{"inlineContent":[{"text":"The above examples use Base mode. Preshared key mode, Authenticated mode and Authenticated, preshared key mode","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can also be used."}],"type":"paragraph"}]}],"references":{"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References","role":"article","kind":"article","title":"References","type":"topic","url":"\/documentation\/swifthpke\/references"},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"kind":"article","url":"\/documentation\/swifthpke\/cryptokit","role":"article","abstract":[{"text":"SwiftHPKE is compatible with Apple’s CryptoKit framework","type":"text"}],"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","title":"CryptoKit Compatibility"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"type":"topic","role":"collection","abstract":[{"text":"Hybrid Public Key Encryption","type":"text"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","url":"\/documentation\/swifthpke","title":"SwiftHPKE","kind":"symbol"},"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"kind":"article","url":"\/documentation\/swifthpke\/keymanagement","role":"article","abstract":[{"text":"Creating new keys and loading exsisting keys","type":"text"}],"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","title":"Key Management"},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"kind":"article","url":"\/documentation\/swifthpke\/performance","role":"article","abstract":[{"text":"Encryption and decryption speed","type":"text"}],"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","title":"Performance"}}}