{"topicSections":[{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender"],"title":"Classes"},{"title":"Structures","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PrivateKey","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PublicKey"]},{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Byte","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Bytes"],"title":"Type Aliases"},{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/HPKEException"],"title":"Enumerations"},{"title":"Additional Information","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","interfaceLanguage":"swift"},"metadata":{"title":"SwiftHPKE","modules":[{"name":"SwiftHPKE"}],"externalID":"SwiftHPKE","symbolKind":"module","role":"collection","roleHeading":"Framework"},"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"Hybrid Public Key Encryption"}],"kind":"symbol","primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftHPKE implements the Hybrid Public Key Encryption standard as defined in [RFC 9180]."}]},{"type":"paragraph","inlineContent":[{"text":"The basic concepts in SwiftHPKE are ","type":"text"},{"type":"codeVoice","code":"CipherSuite"},{"type":"text","text":", "},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Recipient"},{"text":", represented by the ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite","isActive":true},{"type":"text","text":" structure and the "},{"isActive":true,"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender","type":"reference"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient"},{"text":" classes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A CipherSuite combines a "},{"type":"emphasis","inlineContent":[{"text":"Key Encapsulation Mechanism","type":"text"}]},{"type":"text","text":" ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM"},{"type":"text","text":"), a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Key Derivation Function"}]},{"text":" (","type":"text"},{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF","type":"reference","isActive":true},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and a ","type":"text"},{"inlineContent":[{"text":"Authenticated Encryption with Associated Data","type":"text"}],"type":"emphasis"},{"text":" (","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD"},{"type":"text","text":") algorithm."}]},{"inlineContent":[{"type":"text","text":"There are 5 different KEM’s, 3 different KDF’s and 4 different AEAD’s giving 60 CipherSuite combinations."}],"type":"paragraph"},{"inlineContent":[{"text":"Encryption and decryption takes place in one of four modes:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Base mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Preshared key mode"}]}]},{"content":[{"inlineContent":[{"text":"Authenticated mode","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Authenticated, preshared key mode"}],"type":"paragraph"}]}]},{"text":"Stateless Single-shot API","type":"heading","level":3,"anchor":"Stateless-Single-shot-API"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"CipherSuite"},{"type":"text","text":" instance can encrypt (seal) a single plaintext message and decrypt (open) a single"},{"text":" ","type":"text"},{"text":"ciphertext message without the need for a ","type":"text"},{"code":"Sender","type":"codeVoice"},{"type":"text","text":" instance and a "},{"code":"Recipient","type":"codeVoice"},{"type":"text","text":" instance."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Example","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Encryption and decryption of a single message in base mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .X448, kdf: .KDF512, aead: .AESGCM256)","","\/\/ The recipient keys","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","let plainText = Bytes(\"Hi, there\".utf8)","let (encapsulatedKey, cipherText) = try theSuite.seal(publicKey: recipientPub, info: [1, 2, 3], pt: plainText, aad: [4, 5, 6])","let decrypted = try theSuite.open(privateKey: recipientPriv, info: [1, 2, 3], ct: cipherText, aad: [4, 5, 6], encap: encapsulatedKey)","print(String(bytes: decrypted, encoding: .utf8)!)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","code":["Hi, there"],"type":"codeListing"},{"type":"heading","anchor":"Stateful-Multi-message-API","text":"Stateful Multi-message API","level":3},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" is based on a specific "},{"code":"CipherSuite","type":"codeVoice"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" instance can encrypt (seal)"},{"type":"text","text":" "},{"text":"a sequence of plaintexts in one of the four modes shown above.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Recipient"},{"text":" is also based on a specific ","type":"text"},{"code":"CipherSuite","type":"codeVoice"},{"text":" and a ","type":"text"},{"type":"codeVoice","code":"Recipient"},{"type":"text","text":" instance can decrypt (open)"},{"type":"text","text":" "},{"text":"a sequence of ciphertexts in the four modes.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Encryption and decryption of several messages in authenticated mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .P384, kdf: .KDF384, aead: .CHACHAPOLY)","","let plainText1 = Bytes(\"Hi, there 1\".utf8)","let plainText2 = Bytes(\"Hi, there 2\".utf8)","let plainText3 = Bytes(\"Hi, there 3\".utf8)","","\/\/ The Sender and Recipient keys","let (senderPub, senderPriv) = try theSuite.makeKeyPair()","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","\/\/ Create the Sender instance","let sender = try Sender(suite: theSuite, publicKey: recipientPub, info: [1, 2, 3], authentication: senderPriv)","","let cipherText1 = try sender.seal(pt: plainText1, aad: [4, 5])","let cipherText2 = try sender.seal(pt: plainText2, aad: [6, 7])","let cipherText3 = try sender.seal(pt: plainText3, aad: [8, 9])","","\/\/ Create the Recipient instance","let recipient = try Recipient(suite: theSuite, privateKey: recipientPriv, info: [1, 2, 3], authentication: senderPub, encap: sender.encapsulatedKey)","","let decrypted1 = try recipient.open(ct: cipherText1, aad: [4, 5])","let decrypted2 = try recipient.open(ct: cipherText2, aad: [6, 7])","let decrypted3 = try recipient.open(ct: cipherText3, aad: [8, 9])","","print(String(bytes: decrypted1, encoding: .utf8)!)","print(String(bytes: decrypted2, encoding: .utf8)!)","print(String(bytes: decrypted3, encoding: .utf8)!)"]},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"code":["Hi, there 1","Hi, there 2","Hi, there 3"],"type":"codeListing","syntax":"swift"},{"type":"aside","style":"important","content":[{"inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"The messages must be decrypted in the order in which they were encrypted."}],"type":"paragraph"}],"name":"Important"},{"anchor":"Usage","level":3,"type":"heading","text":"Usage"},{"inlineContent":[{"type":"text","text":"To use SwiftHPKE, in your project "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Package.swift"}]},{"text":" file add a dependency like","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/leif-ibsen\/SwiftHPKE\", from: \"2.6.0\"),","]"]},{"type":"paragraph","inlineContent":[{"text":"SwiftHPKE itself depends on the ASN1, BigInt and Digest packages","type":"text"}]},{"syntax":"swift","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/leif-ibsen\/ASN1\", from: \"2.6.0\"),","  .package(url: \"https:\/\/github.com\/leif-ibsen\/BigInt\", from: \"1.19.0\"),","  .package(url: \"https:\/\/github.com\/leif-ibsen\/Digest\", from: \"1.8.0\"),","],"],"type":"codeListing"},{"style":"important","name":"Important","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftHPKE requires Swift 5.0. It also requires that the "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and "},{"code":"UInt","type":"codeVoice"},{"type":"text","text":" types be 64 bit types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"SwiftHPKE uses Apple’s CryptoKit framework. Therefore, for macOS the version must be at least 10.15,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for iOS the version must be at least 13, and for watchOS the version must be at least 8."}]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/swifthpke"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SwiftHPKE/documentation/SwiftHPKE/HPKEException":{"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/HPKEException","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HPKEException","kind":"identifier"}],"title":"HPKEException","navigatorTitle":[{"text":"HPKEException","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"The HPKE exceptions"}],"url":"\/documentation\/swifthpke\/hpkeexception"},"doc://SwiftHPKE/documentation/SwiftHPKE/PrivateKey":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PrivateKey","kind":"identifier"}],"type":"topic","url":"\/documentation\/swifthpke\/privatekey","abstract":[{"text":"The private key","type":"text"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PrivateKey","title":"PrivateKey","role":"symbol","navigatorTitle":[{"text":"PrivateKey","kind":"identifier"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/KDF":{"role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"KDF"}],"title":"KDF","abstract":[{"type":"text","text":"The key derivation functions"}],"url":"\/documentation\/swifthpke\/kdf","navigatorTitle":[{"text":"KDF","kind":"identifier"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF","kind":"symbol"},"doc://SwiftHPKE/documentation/SwiftHPKE/CipherSuite":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CipherSuite","kind":"identifier"}],"type":"topic","url":"\/documentation\/swifthpke\/ciphersuite","abstract":[{"type":"text","text":"The cipher suite"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite","title":"CipherSuite","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CipherSuite"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"title":"Key Management","url":"\/documentation\/swifthpke\/keymanagement","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","role":"article","kind":"article","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/Bytes":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bytes","kind":"identifier"}],"title":"Bytes","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Bytes","url":"\/documentation\/swifthpke\/bytes","kind":"symbol","role":"symbol","abstract":[{"text":"Array of unsigned 8 bit values","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Bytes"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/SecretExport":{"title":"Secret Export","url":"\/documentation\/swifthpke\/secretexport","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","role":"article","kind":"article","abstract":[{"type":"text","text":"Creating secret messages"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/AEAD":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AEAD","kind":"identifier"}],"url":"\/documentation\/swifthpke\/aead","kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD","role":"symbol","abstract":[{"type":"text","text":"The AEAD encryption algorithms"}],"title":"AEAD","navigatorTitle":[{"kind":"identifier","text":"AEAD"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","type":"topic","abstract":[{"text":"Encryption and decryption speed","type":"text"}],"role":"article","kind":"article","title":"Performance","url":"\/documentation\/swifthpke\/performance"},"doc://SwiftHPKE/documentation/SwiftHPKE/PublicKey":{"abstract":[{"type":"text","text":"The public key"}],"navigatorTitle":[{"text":"PublicKey","kind":"identifier"}],"title":"PublicKey","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PublicKey","role":"symbol","url":"\/documentation\/swifthpke\/publickey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PublicKey"}],"type":"topic","kind":"symbol"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"abstract":[{"text":"Hybrid Public Key Encryption","type":"text"}],"type":"topic","url":"\/documentation\/swifthpke","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","kind":"symbol","title":"SwiftHPKE","role":"collection"},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"title":"CryptoKit Compatibility","url":"\/documentation\/swifthpke\/cryptokit","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","role":"article","kind":"article","abstract":[{"type":"text","text":"SwiftHPKE is compatible with Apple’s CryptoKit framework"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/KEM":{"title":"KEM","url":"\/documentation\/swifthpke\/kem","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KEM"}],"abstract":[{"type":"text","text":"The key encapsulation mechanisms"}],"navigatorTitle":[{"text":"KEM","kind":"identifier"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/Sender":{"type":"topic","abstract":[{"text":"The sender","type":"text"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Sender"}],"title":"Sender","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sender","kind":"identifier"}],"url":"\/documentation\/swifthpke\/sender"},"doc://SwiftHPKE/documentation/SwiftHPKE/Recipient":{"url":"\/documentation\/swifthpke\/recipient","title":"Recipient","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Recipient","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Recipient"}],"type":"topic","abstract":[{"type":"text","text":"The recipient"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient"},"doc://SwiftHPKE/documentation/SwiftHPKE/Byte":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Byte","role":"symbol","abstract":[{"type":"text","text":"Unsigned 8 bit value"}],"type":"topic","title":"Byte","kind":"symbol","url":"\/documentation\/swifthpke\/byte","navigatorTitle":[{"text":"Byte","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Byte","kind":"identifier"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"title":"References","url":"\/documentation\/swifthpke\/references","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References","role":"article","kind":"article","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"type":"topic"}}}