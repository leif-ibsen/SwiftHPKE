{"topicSections":[{"title":"Classes","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender"]},{"title":"Structures","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PrivateKey","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PublicKey","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Base64"]},{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Byte","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Bytes"],"title":"Type Aliases"},{"title":"Enumerations","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/HPKEException"]},{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"],"title":"Additional Information"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swifthpke"]}],"metadata":{"roleHeading":"Framework","role":"collection","title":"SwiftHPKE","externalID":"SwiftHPKE","modules":[{"name":"SwiftHPKE"}],"symbolKind":"module"},"identifier":{"url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Hybrid Public Key Encryption","type":"text"}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"SwiftHPKE implements the Hybrid Public Key Encryption standard as defined in [RFC 9180]."}],"type":"paragraph"},{"inlineContent":[{"text":"The basic concepts in SwiftHPKE are CipherSuite, Sender and Recipient, represented by the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite"},{"type":"text","text":" structure and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient","type":"reference","isActive":true},{"type":"text","text":" classes."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A CipherSuite combines a "},{"inlineContent":[{"text":"Key Encapsulation Mechanism","type":"text"}],"type":"emphasis"},{"type":"text","text":" ("},{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM","isActive":true,"type":"reference"},{"text":"), a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Key Derivation Function","type":"text"}]},{"text":" (","type":"text"},{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF","isActive":true,"type":"reference"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"and a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Authenticated Encryption with Associated Data","type":"text"}]},{"type":"text","text":" ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD"},{"type":"text","text":") algorithm."}],"type":"paragraph"},{"inlineContent":[{"text":"There are 5 different KEM’s, 3 different KDF’s and 4 different AEAD’s giving 60 CipherSuite combinations.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Encryption and decryption takes place in one of four modes:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Base mode","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Preshared key mode"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Authenticated mode"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Authenticated, preshared key mode"}],"type":"paragraph"}]}]},{"text":"Stateless Single-shot API","type":"heading","level":3,"anchor":"Stateless-Single-shot-API"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"CipherSuite"},{"type":"text","text":" instance can encrypt (seal) a single plaintext message and decrypt (open) a single"},{"type":"text","text":" "},{"type":"text","text":"ciphertext message without the need for a "},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" instance and a "},{"type":"codeVoice","code":"Recipient"},{"type":"text","text":" instance."}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example"}]}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Encryption and decryption of a single message in base mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .X448, kdf: .KDF512, aead: .AESGCM256)","","\/\/ The recipient keys","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","let plainText = Bytes(\"Hi, there\".utf8)","let (encapsulatedKey, cipherText) = try theSuite.seal(publicKey: recipientPub, info: [1, 2, 3], pt: plainText, aad: [4, 5, 6])","let decrypted = try theSuite.open(privateKey: recipientPriv, info: [1, 2, 3], ct: cipherText, aad: [4, 5, 6], encap: encapsulatedKey)","print(String(bytes: decrypted, encoding: .utf8)!)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"type":"codeListing","code":["Hi, there"],"syntax":"swift"},{"level":3,"anchor":"Statefull-Multi-message-API","type":"heading","text":"Statefull Multi-message API"},{"inlineContent":[{"text":"A ","type":"text"},{"code":"Sender","type":"codeVoice"},{"type":"text","text":" is based on a specific "},{"code":"CipherSuite","type":"codeVoice"},{"text":" and a ","type":"text"},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" instance can encrypt (seal)"},{"type":"text","text":" "},{"text":"a sequence of plaintexts in one of the four modes shown above.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Recipient"},{"type":"text","text":" is also based on a specific "},{"type":"codeVoice","code":"CipherSuite"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"Recipient"},{"type":"text","text":" instance can decrypt (open)"},{"type":"text","text":" "},{"text":"a sequence of ciphertexts in the four modes.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Example","type":"text"}]}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Encryption and decryption of several messages in authenticated mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .P384, kdf: .KDF384, aead: .CHACHAPOLY)","","let plainText1 = Bytes(\"Hi, there 1\".utf8)","let plainText2 = Bytes(\"Hi, there 2\".utf8)","let plainText3 = Bytes(\"Hi, there 3\".utf8)","","\/\/ The Sender and Recipient keys","let (senderPub, senderPriv) = try theSuite.makeKeyPair()","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","\/\/ Create the Sender instance","let sender = try Sender(suite: theSuite, publicKey: recipientPub, info: [1, 2, 3], authentication: senderPriv)","","let cipherText1 = try sender.seal(pt: plainText1, aad: [4, 5])","let cipherText2 = try sender.seal(pt: plainText2, aad: [6, 7])","let cipherText3 = try sender.seal(pt: plainText3, aad: [8, 9])","","\/\/ Create the Recipient instance","let recipient = try Recipient(suite: theSuite, privateKey: recipientPriv, info: [1, 2, 3], authentication: senderPub, encap: sender.encapsulatedKey)","","let decrypted1 = try recipient.open(ct: cipherText1, aad: [4, 5])","let decrypted2 = try recipient.open(ct: cipherText2, aad: [6, 7])","let decrypted3 = try recipient.open(ct: cipherText3, aad: [8, 9])","","print(String(bytes: decrypted1, encoding: .utf8)!)","print(String(bytes: decrypted2, encoding: .utf8)!)","print(String(bytes: decrypted3, encoding: .utf8)!)"]},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Hi, there 1","Hi, there 2","Hi, there 3"],"type":"codeListing"},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"text":"The messages must be decrypted in the order in which they were encrypted.","type":"text"}]}],"style":"important","type":"aside"},{"anchor":"Usage","text":"Usage","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"To use SwiftHPKE, in your project ","type":"text"},{"inlineContent":[{"text":"Package.swift","type":"text"}],"type":"emphasis"},{"text":" file add a dependency like","type":"text"}]},{"code":["dependencies: [","  .package(url: \"https:\/\/github.com\/leif-ibsen\/SwiftHPKE\", from: \"2.4.0\"),","]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftHPKE itself depends on the ASN1, BigInt and Digest packages"}]},{"code":["dependencies: [","  .package(url: \"https:\/\/github.com\/leif-ibsen\/ASN1\", from: \"2.4.0\"),","  .package(url: \"https:\/\/github.com\/leif-ibsen\/BigInt\", from: \"1.16.0\"),","  .package(url: \"https:\/\/github.com\/leif-ibsen\/Digest\", from: \"1.3.0\"),","],"],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftHPKE requires Swift 5.0. It also requires that the "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" types be 64 bit types."}]},{"inlineContent":[{"text":"SwiftHPKE uses Apple’s CryptoKit framework. Therefore, for macOS the version must be at least 10.15,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for iOS the version must be at least 13, and for watchOS the version must be at least 8."}],"type":"paragraph"}],"type":"aside","name":"Important","style":"important"}],"kind":"content"}],"hierarchy":{"paths":[[]]},"kind":"symbol","references":{"doc://SwiftHPKE/documentation/SwiftHPKE/KDF":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KDF","kind":"identifier"}],"abstract":[{"text":"The key derivation functions","type":"text"}],"kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KDF","navigatorTitle":[{"kind":"identifier","text":"KDF"}],"url":"\/documentation\/swifthpke\/kdf","type":"topic","title":"KDF"},"doc://SwiftHPKE/documentation/SwiftHPKE/Byte":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Byte","url":"\/documentation\/swifthpke\/byte","navigatorTitle":[{"kind":"identifier","text":"Byte"}],"role":"symbol","title":"Byte","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Unsigned 8 bit value"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Byte"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/Bytes":{"navigatorTitle":[{"text":"Bytes","kind":"identifier"}],"title":"Bytes","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Bytes"}],"abstract":[{"type":"text","text":"Array of unsigned 8 bit values"}],"url":"\/documentation\/swifthpke\/bytes","kind":"symbol","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Bytes","role":"symbol"},"doc://SwiftHPKE/documentation/SwiftHPKE/Sender":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sender"}],"navigatorTitle":[{"text":"Sender","kind":"identifier"}],"title":"Sender","abstract":[{"type":"text","text":"The sender"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Sender","url":"\/documentation\/swifthpke\/sender"},"doc://SwiftHPKE/documentation/SwiftHPKE/Recipient":{"abstract":[{"type":"text","text":"The recipient"}],"navigatorTitle":[{"text":"Recipient","kind":"identifier"}],"role":"symbol","type":"topic","title":"Recipient","kind":"symbol","url":"\/documentation\/swifthpke\/recipient","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Recipient","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Recipient"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"role":"article","title":"References","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"url":"\/documentation\/swifthpke\/references","kind":"article","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"},"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"role":"article","title":"Key Management","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"url":"\/documentation\/swifthpke\/keymanagement","kind":"article","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement"},"doc://SwiftHPKE/documentation/SwiftHPKE/SecretExport":{"kind":"article","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","role":"article","url":"\/documentation\/swifthpke\/secretexport","abstract":[{"type":"text","text":"Creating secret messages"}],"title":"Secret Export"},"doc://SwiftHPKE/documentation/SwiftHPKE/PrivateKey":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PrivateKey","type":"topic","abstract":[{"text":"The private key","type":"text"}],"kind":"symbol","url":"\/documentation\/swifthpke\/privatekey","navigatorTitle":[{"kind":"identifier","text":"PrivateKey"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PrivateKey"}],"title":"PrivateKey"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"abstract":[{"type":"text","text":"Hybrid Public Key Encryption"}],"title":"SwiftHPKE","type":"topic","role":"collection","kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","url":"\/documentation\/swifthpke"},"doc://SwiftHPKE/documentation/SwiftHPKE/KEM":{"kind":"symbol","url":"\/documentation\/swifthpke\/kem","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KEM","navigatorTitle":[{"text":"KEM","kind":"identifier"}],"abstract":[{"type":"text","text":"The key encapsulation mechanisms"}],"title":"KEM","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"KEM","kind":"identifier"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/PublicKey":{"kind":"symbol","url":"\/documentation\/swifthpke\/publickey","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/PublicKey","navigatorTitle":[{"text":"PublicKey","kind":"identifier"}],"abstract":[{"type":"text","text":"The public key"}],"title":"PublicKey","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PublicKey","kind":"identifier"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"url":"\/documentation\/swifthpke\/performance","title":"Performance","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","abstract":[{"type":"text","text":"Encryption and decryption speed"}],"role":"article","kind":"article","type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/Base64":{"type":"topic","title":"Base64","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Base64","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Base64"}],"navigatorTitle":[{"kind":"identifier","text":"Base64"}],"url":"\/documentation\/swifthpke\/base64","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"The Base64 structure"}]},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"kind":"article","abstract":[{"type":"text","text":"SwiftHPKE is compatible with Apple’s CryptoKit framework"}],"title":"CryptoKit Compatibility","url":"\/documentation\/swifthpke\/cryptokit","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","role":"article","type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/HPKEException":{"abstract":[{"text":"The HPKE exceptions","type":"text"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/HPKEException","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HPKEException"}],"kind":"symbol","title":"HPKEException","url":"\/documentation\/swifthpke\/hpkeexception","role":"symbol","navigatorTitle":[{"text":"HPKEException","kind":"identifier"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/CipherSuite":{"abstract":[{"type":"text","text":"The cipher suite"}],"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CipherSuite","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CipherSuite"}],"navigatorTitle":[{"kind":"identifier","text":"CipherSuite"}],"url":"\/documentation\/swifthpke\/ciphersuite","role":"symbol","kind":"symbol","title":"CipherSuite"},"doc://SwiftHPKE/documentation/SwiftHPKE/AEAD":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AEAD","kind":"identifier"}],"navigatorTitle":[{"text":"AEAD","kind":"identifier"}],"abstract":[{"text":"The AEAD encryption algorithms","type":"text"}],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/AEAD","url":"\/documentation\/swifthpke\/aead","kind":"symbol","type":"topic","title":"AEAD"}}}