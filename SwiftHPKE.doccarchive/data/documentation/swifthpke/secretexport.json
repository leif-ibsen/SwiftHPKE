{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swifthpke\/secretexport"]}],"identifier":{"url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"","level":2,"text":""},{"inlineContent":[{"text":"Given the recipient’s public key, a sender can generate a secret that only the recipient can know.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Example-1","text":"Example 1"},{"syntax":"swift","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","","\/\/ Generate the secret","","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [1, 2, 3], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"syntax":"swift","code":["Generated secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]","Retrieved secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]"],"type":"codeListing"},{"type":"heading","anchor":"Example-2","level":3,"text":"Example 2"},{"syntax":"swift","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: [])","","\/\/ Generate the secret","","let secret = try sender.sendExport(context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let receiver = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: [], encap: sender.encapsulatedKey)","let retrievedSecret = try receiver.receiveExport(context: [1, 2, 3], L: 10)","print(\"Retrieved secret:\", retrievedSecret)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"giving (for example):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Generated secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]","Retrieved secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]"]},{"inlineContent":[{"type":"text","text":"The above examples use Base mode. Preshared key mode, Authenticated mode and Authenticated, preshared key mode"},{"text":" ","type":"text"},{"type":"text","text":"can also be used."}],"type":"paragraph"}]}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"SwiftHPKE"}],"title":"Secret Export"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","seeAlsoSections":[{"generated":true,"title":"Additional Information","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"]}],"abstract":[{"type":"text","text":"Creating secret messages"}],"hierarchy":{"paths":[["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"]]},"references":{"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","type":"topic","abstract":[{"text":"Encryption and decryption speed","type":"text"}],"role":"article","kind":"article","title":"Performance","url":"\/documentation\/swifthpke\/performance"},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"title":"CryptoKit Compatibility","url":"\/documentation\/swifthpke\/cryptokit","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","role":"article","kind":"article","abstract":[{"type":"text","text":"SwiftHPKE is compatible with Apple’s CryptoKit framework"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"title":"Key Management","url":"\/documentation\/swifthpke\/keymanagement","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","role":"article","kind":"article","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"title":"References","url":"\/documentation\/swifthpke\/references","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References","role":"article","kind":"article","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"abstract":[{"text":"Hybrid Public Key Encryption","type":"text"}],"type":"topic","url":"\/documentation\/swifthpke","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","kind":"symbol","title":"SwiftHPKE","role":"collection"}}}