{"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"text":"","type":"heading","level":2,"anchor":""},{"type":"paragraph","inlineContent":[{"text":"Given the recipient’s public key, a sender can generate a secret that only the recipient can know.","type":"text"}]},{"anchor":"Example-1","text":"Example 1","type":"heading","level":3},{"type":"codeListing","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","","\/\/ Generate the secret","","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [1, 2, 3], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"syntax":"swift","type":"codeListing","code":["Generated secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]","Retrieved secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]"]},{"anchor":"Example-2","text":"Example 2","level":3,"type":"heading"},{"syntax":"swift","type":"codeListing","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: [])","","\/\/ Generate the secret","","let secret = try sender.sendExport(context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let receiver = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: [], encap: sender.encapsulatedKey)","let retrievedSecret = try receiver.receiveExport(context: [1, 2, 3], L: 10)","print(\"Retrieved secret:\", retrievedSecret)"]},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Generated secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]","Retrieved secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above examples use Base mode. Preshared key mode, Authenticated mode and Authenticated, preshared key mode"},{"type":"text","text":" "},{"text":"can also be used.","type":"text"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport"},"kind":"article","metadata":{"roleHeading":"Article","modules":[{"name":"SwiftHPKE"}],"title":"Secret Export","role":"article"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"],"title":"Additional Information"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"]]},"variants":[{"paths":["\/documentation\/swifthpke\/secretexport"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Creating secret messages","type":"text"}],"references":{"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","title":"Performance","url":"\/documentation\/swifthpke\/performance","kind":"article","abstract":[{"type":"text","text":"Encryption and decryption speed"}],"role":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"role":"article","title":"References","url":"\/documentation\/swifthpke\/references","type":"topic","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"kind":"article","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","kind":"article","role":"article","abstract":[{"text":"SwiftHPKE is compatible with Apple’s CryptoKit framework","type":"text"}],"url":"\/documentation\/swifthpke\/cryptokit","type":"topic","title":"CryptoKit Compatibility"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"role":"collection","title":"SwiftHPKE","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","abstract":[{"type":"text","text":"Hybrid Public Key Encryption"}],"url":"\/documentation\/swifthpke","type":"topic","kind":"symbol"},"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"role":"article","title":"Key Management","url":"\/documentation\/swifthpke\/keymanagement","type":"topic","kind":"article","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","abstract":[{"text":"Creating new keys and loading exsisting keys","type":"text"}]}}}