{"seeAlsoSections":[{"generated":true,"anchor":"Additional-Information","identifiers":["doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/References"],"title":"Additional Information"}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SwiftHPKE"}],"title":"Secret Export"},"sections":[],"variants":[{"paths":["\/documentation\/swifthpke\/secretexport"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"text":"","type":"heading","level":2,"anchor":""},{"inlineContent":[{"type":"text","text":"Given the recipient’s public key, a sender can generate a secret that only the recipient can know."}],"type":"paragraph"},{"anchor":"Example-1","level":3,"text":"Example 1","type":"heading"},{"type":"codeListing","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","","\/\/ Generate the secret","","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [1, 2, 3], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"],"syntax":"swift"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Generated secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]","Retrieved secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]"]},{"type":"heading","level":3,"anchor":"Example-2","text":"Example 2"},{"type":"codeListing","syntax":"swift","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: [])","","\/\/ Generate the secret","","let secret = try sender.sendExport(context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let receiver = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: [], encap: sender.encapsulatedKey)","let retrievedSecret = try receiver.receiveExport(context: [1, 2, 3], L: 10)","print(\"Retrieved secret:\", retrievedSecret)"]},{"type":"paragraph","inlineContent":[{"text":"giving (for example):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Generated secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]","Retrieved secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]"]},{"inlineContent":[{"type":"text","text":"The above examples use Base mode. Preshared key mode, Authenticated mode and Authenticated, preshared key mode"},{"type":"text","text":" "},{"type":"text","text":"can also be used."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","hierarchy":{"paths":[["doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE"]]},"abstract":[{"text":"Creating secret messages","type":"text"}],"references":{"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"role":"article","url":"\/documentation\/swifthpke\/cryptokit","title":"CryptoKit Compatibility","abstract":[{"text":"SwiftHPKE is compatible with Apple’s CryptoKit framework","type":"text"}],"identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","type":"topic","kind":"article"},"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE":{"role":"collection","url":"\/documentation\/swifthpke","title":"SwiftHPKE","abstract":[{"type":"text","text":"Hybrid Public Key Encryption"}],"identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE","kind":"symbol","type":"topic"},"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"role":"article","url":"\/documentation\/swifthpke\/keymanagement","title":"Key Management","abstract":[{"text":"Creating new keys and loading exsisting keys","type":"text"}],"identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","type":"topic","kind":"article"},"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE/References":{"title":"References","kind":"article","url":"\/documentation\/swifthpke\/references","role":"article","type":"topic","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/References"},"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE/Performance":{"identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/Performance","title":"Performance","type":"topic","kind":"article","abstract":[{"text":"Encryption and decryption speed","type":"text"}],"url":"\/documentation\/swifthpke\/performance","role":"article"}}}