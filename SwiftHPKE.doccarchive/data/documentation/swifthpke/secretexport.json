{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport"},"sections":[],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swifthpke\/secretexport"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/References"],"title":"Additional Information","anchor":"Additional-Information","generated":true}],"metadata":{"modules":[{"name":"SwiftHPKE"}],"role":"article","title":"Secret Export","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE"]]},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"","anchor":""},{"type":"paragraph","inlineContent":[{"text":"Given the recipient’s public key, a sender can generate a secret that only the recipient can know.","type":"text"}]},{"type":"heading","level":3,"text":"Example 1","anchor":"Example-1"},{"type":"codeListing","syntax":"swift","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","","\/\/ Generate the secret","","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [1, 2, 3], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"type":"codeListing","syntax":"swift","code":["Generated secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]","Retrieved secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]"]},{"type":"heading","level":3,"text":"Example 2","anchor":"Example-2"},{"type":"codeListing","syntax":"swift","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: [])","","\/\/ Generate the secret","","let secret = try sender.sendExport(context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let receiver = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: [], encap: sender.encapsulatedKey)","let retrievedSecret = try receiver.receiveExport(context: [1, 2, 3], L: 10)","print(\"Retrieved secret:\", retrievedSecret)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"type":"codeListing","syntax":"swift","code":["Generated secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]","Retrieved secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]"]},{"type":"paragraph","inlineContent":[{"text":"The above examples use Base mode. Preshared key mode, Authenticated mode and Authenticated, preshared key mode","type":"text"},{"text":" ","type":"text"},{"text":"can also be used.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Creating secret messages"}],"references":{"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"url":"\/documentation\/swifthpke\/keymanagement","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","type":"topic","title":"Key Management","kind":"article","role":"article"},"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"type":"topic","identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","abstract":[{"type":"text","text":"SwiftHPKE is compatible with Apple’s CryptoKit framework"}],"title":"CryptoKit Compatibility","kind":"article","url":"\/documentation\/swifthpke\/cryptokit","role":"article"},"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE/References":{"kind":"article","type":"topic","url":"\/documentation\/swifthpke\/references","identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/References","title":"References","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"role":"article"},"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE":{"kind":"symbol","abstract":[{"type":"text","text":"Hybrid Public Key Encryption"}],"role":"collection","type":"topic","title":"SwiftHPKE","url":"\/documentation\/swifthpke","identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE"},"doc://swifthpke.SwiftHPKE/documentation/SwiftHPKE/Performance":{"url":"\/documentation\/swifthpke\/performance","abstract":[{"type":"text","text":"Encryption and decryption speed"}],"identifier":"doc:\/\/swifthpke.SwiftHPKE\/documentation\/SwiftHPKE\/Performance","title":"Performance","type":"topic","kind":"article","role":"article"}}}