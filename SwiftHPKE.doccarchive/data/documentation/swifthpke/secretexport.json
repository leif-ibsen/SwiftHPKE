{"kind":"article","hierarchy":{"paths":[["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"SwiftHPKE"}],"title":"Secret Export"},"seeAlsoSections":[{"title":"Additional Information","identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"],"generated":true}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"","level":2,"text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the recipient’s public key, a sender can generate a secret that only the recipient can know."}]},{"text":"Example 1","type":"heading","anchor":"Example-1","level":3},{"code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","","\/\/ Generate the secret","","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [1, 2, 3], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Generated secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]","Retrieved secret: [172, 169, 119, 121, 167, 53, 213, 12, 0, 29]"]},{"text":"Example 2","anchor":"Example-2","type":"heading","level":3},{"type":"codeListing","code":["import SwiftHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","let theSuite = CipherSuite(kem: .P256, kdf: .KDF256, aead: .EXPORTONLY)","let (recipientPubKey, recipientPrivKey) = try theSuite.makeKeyPair()","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: [])","","\/\/ Generate the secret","","let secret = try sender.sendExport(context: [1, 2, 3], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","","let receiver = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: [], encap: sender.encapsulatedKey)","let retrievedSecret = try receiver.receiveExport(context: [1, 2, 3], L: 10)","print(\"Retrieved secret:\", retrievedSecret)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"type":"codeListing","code":["Generated secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]","Retrieved secret: [3, 230, 139, 128, 86, 4, 81, 78, 110, 135]"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The above examples use Base mode. Preshared key mode, Authenticated mode and Authenticated, preshared key mode"},{"type":"text","text":" "},{"text":"can also be used.","type":"text"}],"type":"paragraph"}]}],"abstract":[{"type":"text","text":"Creating secret messages"}],"variants":[{"paths":["\/documentation\/swifthpke\/secretexport"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SwiftHPKE/documentation/SwiftHPKE/KeyManagement":{"role":"article","title":"Key Management","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"url":"\/documentation\/swifthpke\/keymanagement","kind":"article","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/KeyManagement"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"abstract":[{"type":"text","text":"Hybrid Public Key Encryption"}],"title":"SwiftHPKE","type":"topic","role":"collection","kind":"symbol","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","url":"\/documentation\/swifthpke"},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"kind":"article","abstract":[{"type":"text","text":"SwiftHPKE is compatible with Apple’s CryptoKit framework"}],"title":"CryptoKit Compatibility","url":"\/documentation\/swifthpke\/cryptokit","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","role":"article","type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"url":"\/documentation\/swifthpke\/performance","title":"Performance","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","abstract":[{"type":"text","text":"Encryption and decryption speed"}],"role":"article","kind":"article","type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"role":"article","title":"References","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"url":"\/documentation\/swifthpke\/references","kind":"article","type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"}}}