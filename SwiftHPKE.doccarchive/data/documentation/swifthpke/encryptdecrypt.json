{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/EncryptDecrypt"},"hierarchy":{"paths":[["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Usage","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Basics","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CreateKeys","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/LoadKeys","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Dependencies","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"],"generated":true}],"kind":"article","variants":[{"paths":["\/documentation\/swifthpke\/encryptdecrypt"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"","text":""},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"CipherSuite"}],"type":"emphasis"},{"text":" instance can encrypt (seal) a single plaintext message and decrypt (open) a single ciphertext message.","type":"text"}],"type":"paragraph"},{"anchor":"Example","level":3,"type":"heading","text":"Example"},{"code":["\/\/ Encryption and decryption of a single message in base mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .X448, kdf: .KDF512, aead: .AESGCM256)","","\/\/ The recipient keys","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","let plainText = Bytes(\"Hi, there\".utf8)","let (encapsulatedKey, cipherText) = try theSuite.seal(publicKey: recipientPub, info: [1, 2, 3], pt: plainText, aad: [4, 5, 6])","let decrypted = try theSuite.open(privateKey: recipientPriv, info: [1, 2, 3], ct: cipherText, aad: [4, 5, 6], encap: encapsulatedKey)","print(String(bytes: decrypted, encoding: .utf8)!)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"code":["Hi, there"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a "},{"inlineContent":[{"type":"text","text":"Sender"}],"type":"emphasis"},{"text":" instance and a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Recipient","type":"text"}]},{"text":" instance it is possible to encrypt a sequence of plaintext messages","type":"text"},{"text":" ","type":"text"},{"text":"and decrypt a sequence of ciphertext messages.","type":"text"}]},{"text":"Example","level":3,"anchor":"Example","type":"heading"},{"type":"codeListing","syntax":"swift","code":["\/\/ Encryption and decryption of several messages in authenticated mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .P384, kdf: .KDF384, aead: .CHACHAPOLY)","","let plainText1 = Bytes(\"Hi, there 1\".utf8)","let plainText2 = Bytes(\"Hi, there 2\".utf8)","let plainText3 = Bytes(\"Hi, there 3\".utf8)","","\/\/ The Sender and Recipient keys","let (senderPub, senderPriv) = try theSuite.makeKeyPair()","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","\/\/ Create the Sender instance","let sender = try Sender(suite: theSuite, publicKey: recipientPub, info: [1, 2, 3], authentication: senderPriv)","","let cipherText1 = try sender.seal(pt: plainText1, aad: [4, 5])","let cipherText2 = try sender.seal(pt: plainText2, aad: [6, 7])","let cipherText3 = try sender.seal(pt: plainText3, aad: [8, 9])","","\/\/ Create the Recipient instance","let recipient = try Recipient(suite: theSuite, privateKey: recipientPriv, info: [1, 2, 3], authentication: senderPub, encap: sender.encapsulatedKey)","","let decrypted1 = try recipient.open(ct: cipherText1, aad: [4, 5])","let decrypted2 = try recipient.open(ct: cipherText2, aad: [6, 7])","let decrypted3 = try recipient.open(ct: cipherText3, aad: [8, 9])","","print(String(bytes: decrypted1, encoding: .utf8)!)","print(String(bytes: decrypted2, encoding: .utf8)!)","print(String(bytes: decrypted3, encoding: .utf8)!)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","code":["Hi, there 1","Hi, there 2","Hi, there 3"],"type":"codeListing"}],"kind":"content"}],"sections":[],"metadata":{"modules":[{"name":"SwiftHPKE"}],"role":"article","title":"Encryption and Decryption","roleHeading":"Article"},"references":{"doc://SwiftHPKE/documentation/SwiftHPKE/Dependencies":{"abstract":[],"kind":"article","title":"Dependencies","url":"\/documentation\/swifthpke\/dependencies","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Dependencies","role":"article","type":"topic"},"doc://SwiftHPKE/documentation/SwiftHPKE/Basics":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Basics","type":"topic","abstract":[],"role":"article","url":"\/documentation\/swifthpke\/basics","kind":"article","title":"Basics"},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"url":"\/documentation\/swifthpke\/performance","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","role":"article","kind":"article","abstract":[],"type":"topic","title":"Performance"},"doc://SwiftHPKE/documentation/SwiftHPKE/Usage":{"url":"\/documentation\/swifthpke\/usage","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Usage","role":"article","kind":"article","abstract":[],"type":"topic","title":"Usage"},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"abstract":[],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","title":"Apple CryptoKit Compatibility","type":"topic","role":"article","url":"\/documentation\/swifthpke\/cryptokit","kind":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE/CreateKeys":{"type":"topic","kind":"article","title":"Creating Public and Private Keys","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CreateKeys","abstract":[],"url":"\/documentation\/swifthpke\/createkeys","role":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"title":"SwiftHPKE","role":"collection","abstract":[],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE","url":"\/documentation\/swifthpke","type":"topic","kind":"symbol"},"doc://SwiftHPKE/documentation/SwiftHPKE/LoadKeys":{"url":"\/documentation\/swifthpke\/loadkeys","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/LoadKeys","role":"article","kind":"article","abstract":[],"type":"topic","title":"Loading Existing Keys"},"doc://SwiftHPKE/documentation/SwiftHPKE/SecretExport":{"url":"\/documentation\/swifthpke\/secretexport","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","abstract":[],"title":"Secret Export","kind":"article","type":"topic","role":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"url":"\/documentation\/swifthpke\/references","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References","abstract":[],"title":"References","kind":"article","type":"topic","role":"article"}}}