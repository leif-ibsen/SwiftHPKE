{"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swifthpke\/encryptdecrypt"]}],"hierarchy":{"paths":[["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Usage","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Basics","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CreateKeys","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/LoadKeys","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Dependencies","doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References"]}],"identifier":{"url":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/EncryptDecrypt","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"SwiftHPKE"}],"roleHeading":"Article","title":"Encryption and Decryption","role":"article"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"","type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"CipherSuite"}]},{"type":"text","text":" instance can encrypt (seal) a single plaintext message and decrypt (open) a single ciphertext message."}]},{"text":"Example","anchor":"Example","level":3,"type":"heading"},{"type":"codeListing","syntax":"Swift","code":["\/\/ Encryption and decryption of a single message in base mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .X448, kdf: .KDF512, aead: .AESGCM256)","","\/\/ The recipient keys","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","let plainText = Bytes(\"Hi, there\".utf8)","let (encapsulatedKey, cipherText) = try theSuite.seal(publicKey: recipientPub, info: [1, 2, 3], pt: plainText, aad: [4, 5, 6])","let decrypted = try theSuite.open(privateKey: recipientPriv, info: [1, 2, 3], ct: cipherText, aad: [4, 5, 6], encap: encapsulatedKey)","print(String(bytes: decrypted, encoding: .utf8)!)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"Swift","type":"codeListing","code":["Hi, there"]},{"type":"paragraph","inlineContent":[{"text":"Using a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Sender","type":"text"}]},{"text":" instance and a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Recipient"}]},{"type":"text","text":" instance it is possible to encrypt a sequence of plaintext messages"},{"text":" ","type":"text"},{"type":"text","text":"and decrypt a sequence of ciphertext messages."}]},{"level":3,"type":"heading","text":"Example","anchor":"Example"},{"type":"codeListing","syntax":"Swift","code":["\/\/ Encryption and decryption of several messages in authenticated mode","","import SwiftHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .P384, kdf: .KDF384, aead: .CHACHAPOLY)","","let plainText1 = Bytes(\"Hi, there 1\".utf8)","let plainText2 = Bytes(\"Hi, there 2\".utf8)","let plainText3 = Bytes(\"Hi, there 3\".utf8)","","\/\/ The Sender and Recipient keys","let (senderPub, senderPriv) = try theSuite.makeKeyPair()","let (recipientPub, recipientPriv) = try theSuite.makeKeyPair()","","\/\/ Create the Sender instance","let sender = try Sender(suite: theSuite, publicKey: recipientPub, info: [1, 2, 3], authentication: senderPriv)","","let cipherText1 = try sender.seal(pt: plainText1, aad: [4, 5])","let cipherText2 = try sender.seal(pt: plainText2, aad: [6, 7])","let cipherText3 = try sender.seal(pt: plainText3, aad: [8, 9])","","\/\/ Create the Recipient instance","let recipient = try Recipient(suite: theSuite, privateKey: recipientPriv, info: [1, 2, 3], authentication: senderPub, encap: sender.encapsulatedKey)","","let decrypted1 = try recipient.open(ct: cipherText1, aad: [4, 5])","let decrypted2 = try recipient.open(ct: cipherText2, aad: [6, 7])","let decrypted3 = try recipient.open(ct: cipherText3, aad: [8, 9])","","print(String(bytes: decrypted1, encoding: .utf8)!)","print(String(bytes: decrypted2, encoding: .utf8)!)","print(String(bytes: decrypted3, encoding: .utf8)!)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"Swift","code":["Hi, there 1","Hi, there 2","Hi, there 3"],"type":"codeListing"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","references":{"doc://SwiftHPKE/documentation/SwiftHPKE/SecretExport":{"type":"topic","abstract":[],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/SecretExport","title":"Secret Export","url":"\/documentation\/swifthpke\/secretexport","kind":"article","role":"article"},"doc://SwiftHPKE/documentation/SwiftHPKE/CreateKeys":{"role":"article","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CreateKeys","kind":"article","type":"topic","title":"Creating Public and Private Keys","abstract":[],"url":"\/documentation\/swifthpke\/createkeys"},"doc://SwiftHPKE/documentation/SwiftHPKE/CryptoKit":{"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/CryptoKit","url":"\/documentation\/swifthpke\/cryptokit","kind":"article","role":"article","title":"Apple CryptoKit Compatibility","abstract":[]},"doc://SwiftHPKE/documentation/SwiftHPKE/Basics":{"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Basics","url":"\/documentation\/swifthpke\/basics","kind":"article","title":"Basics","role":"article","abstract":[]},"doc://SwiftHPKE/documentation/SwiftHPKE/Usage":{"kind":"article","url":"\/documentation\/swifthpke\/usage","role":"article","type":"topic","title":"Usage","abstract":[],"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Usage"},"doc://SwiftHPKE/documentation/SwiftHPKE/Performance":{"type":"topic","kind":"article","url":"\/documentation\/swifthpke\/performance","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Performance","title":"Performance","role":"article","abstract":[]},"doc://SwiftHPKE/documentation/SwiftHPKE/References":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/References","kind":"article","type":"topic","role":"article","title":"References","url":"\/documentation\/swifthpke\/references","abstract":[]},"doc://SwiftHPKE/documentation/SwiftHPKE/LoadKeys":{"role":"article","kind":"article","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/LoadKeys","type":"topic","url":"\/documentation\/swifthpke\/loadkeys","abstract":[],"title":"Loading Existing Keys"},"doc://SwiftHPKE/documentation/SwiftHPKE":{"kind":"symbol","role":"collection","url":"\/documentation\/swifthpke","title":"SwiftHPKE","abstract":[],"type":"topic","identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE"},"doc://SwiftHPKE/documentation/SwiftHPKE/Dependencies":{"identifier":"doc:\/\/SwiftHPKE\/documentation\/SwiftHPKE\/Dependencies","abstract":[],"kind":"article","role":"article","title":"Dependencies","type":"topic","url":"\/documentation\/swifthpke\/dependencies"}}}